<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis数据类型</title>
    <url>/2017/08/02/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)等</p>
<h1 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​            List类型是一个链表结构的集合，其主要功能有push、pop、获取元素等。更详细的说，List类型是一个双端链表的节后，我们可以通过相关的操作进行集合的头部或者尾部添加和删除元素，List的设计非常简单精巧，即可以作为栈，又可以作为队列，满足绝大多数的需求。</p>
<blockquote>
<p>按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)<br>类似JAVA中的LinkedList</p>
</blockquote>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">赋值语法：</span> <span class="string"></span></span><br><span class="line"></span><br><span class="line">	<span class="attr">LPUSH</span> <span class="string">key value1 [value2]  :将一个或多个值插入到列表头部(从左侧添加)</span></span><br><span class="line">	<span class="attr">RPUSH</span> <span class="string">key value1 [value2]  :在列表中添加一个或多个值(从右侧添加)</span></span><br><span class="line">	<span class="attr">LPUSHX</span> <span class="string">key value   :将一个值插入到已存在的列表头部。如果列表不在，操作无效</span></span><br><span class="line">	<span class="attr">RPUSHX</span> <span class="string">key value   :一个值插入已存在的列表尾部(最右边)。如果列表不在，操作无效。</span></span><br></pre></td></tr></table></figure>

<h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">取值语法：</span> <span class="string"></span></span><br><span class="line">	<span class="attr">LLEN</span> <span class="string">key      :获取列表长度</span></span><br><span class="line">	<span class="attr">LINDEX</span> <span class="string">key index   :通过索引获取列表中的元素</span></span><br><span class="line">	<span class="attr">LRANGE</span> <span class="string">key start stop  :获取列表指定范围内的元素</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>描述： 返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。</p>
<p>其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。</p>
<p>也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。<br>start:  页大小<em>(页数-1)<br>stop : (页大小</em>页数)-1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前是第1页， 每页显示3条数据</span><br><span class="line">start :0  stop:2</span><br><span class="line">start :3  stop:5</span><br><span class="line">start :6  stop: 8</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">删除语法：</span></span><br><span class="line">	<span class="attr">LPOP</span> <span class="string">key  移出并获取列表的第一个元素(从左侧删除)</span></span><br><span class="line">	<span class="attr">RPOP</span> <span class="string">key  移除列表的最后一个元素，返回值为移除的元素(从右侧删除)</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">BLPOP</span> <span class="string">key1 [key2 ] timeout 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">实例</span>:<span class="string"></span></span><br><span class="line"><span class="attr">redis</span> <span class="string">127.0.0.1:6379&gt; BLPOP list1 100</span></span><br><span class="line"><span class="meta">在以上实例中，操作会被阻塞，如果指定的列表</span> <span class="string">key list1 存在数据则会返回第一个元素，否则在等待100秒后会返回 nil</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">BRPOP</span> <span class="string">key1 [key2 ] timeout :移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">LTRIM</span> <span class="string">key start stop   :对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</span></span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">修改语法：</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">LSET</span> <span class="string">key index value  :通过索引设置列表元素的值</span></span><br><span class="line">	<span class="attr">LINSERT</span> <span class="string">key BEFORE|AFTER world value :在列表的元素前或者后插入元素 描述：将值 value 插入到列表 key 当中，位于值 world 之前或之后。</span></span><br></pre></td></tr></table></figure>

<h3 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">高级语法：</span></span><br><span class="line">	<span class="attr">RPOPLPUSH</span> <span class="string">source destination :移除列表的最后一个元素，并将该元素添加到另一个列表并返回	</span></span><br><span class="line">	<span class="attr">示例描述：</span></span><br><span class="line">		<span class="attr">RPOPLPUSH</span> <span class="string">a1  a2   :a1的最后元素移到a2的左侧</span></span><br><span class="line">		<span class="attr">RPOPLPUSH</span> <span class="string">a1  a1   :循环列表，将最后元素移到最左侧</span></span><br><span class="line">	<span class="attr">BRPOPLPUSH</span> <span class="string">source destination timeout  :从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</span></span><br></pre></td></tr></table></figure>



<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>如下演示了List类型所有命令的调用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ListCacheServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> guoweixin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"listCacheService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListCacheServiceImpl</span> <span class="keyword">implements</span> <span class="title">ListCacheService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(ListCacheServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lpushAll</span><span class="params">(String key, List &lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().leftPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lpushAll</span><span class="params">(String key, List &lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().leftPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rpushAll</span><span class="params">(String key, List &lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rpushAll</span><span class="params">(String key, List &lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在变量左边添加元素值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">lpush</span><span class="params">(String key, Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().leftPush(key, object);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把最后一个参数值放到指定集合的第一个出现中间参数的前面，如果中间参数值存在的话。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pivot 中间参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 要放的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 true 失败 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">lpush</span><span class="params">(String key, Object pivot, Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().leftPush(key,pivot,object);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合中第一次出现第二个参数变量元素的右边添加第三个参数变量的元素值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pivot 中间参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 要放的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 true 失败 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">rpush</span><span class="params">(String key, Object pivot,Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key,pivot,object);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向集合最右边添加元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 true 失败 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">rpush</span><span class="params">(String key, Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, object);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  在变量左边添加元素值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 true 失败 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">lpush</span><span class="params">(String key, <span class="keyword">int</span> expireTime, Object... objects)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().leftPush(key,objects);</span><br><span class="line">            <span class="keyword">if</span> (expireTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, expireTime);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  在变量右边添加元素值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 true 失败 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">rpush</span><span class="params">(String key, <span class="keyword">int</span> expireTime, Object... objects)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key,objects);</span><br><span class="line">            <span class="keyword">if</span> (expireTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, expireTime);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果存在集合则向左边添加元素，不存在不加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 true 失败 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lPushIfPresent</span><span class="params">(String key, Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().leftPushIfPresent(key,object);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果存在集合则向右边添加元素，不存在不加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 true 失败 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rPushIfPresent</span><span class="params">(String key, Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushIfPresent(key,object);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除集合中的左边第一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回右边的第一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lpop</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPop(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除集合中右边的元素。一般用在队列取值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回右边的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">rpop</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPop(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除集合中左边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。一般用在队列取值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 左边的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lpop</span><span class="params">(String key,<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPop(key,time,TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除集合中右边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。一般用在队列取值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回右边元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">rpop</span><span class="params">(String key,<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPop(key,time,TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取指定区间的值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束位置，为-1指结尾的位置， start 0，end -1取所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lrange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key,start,end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">llen</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在集合的指定位置插入元素,如果指定位置已有元素，则覆盖，没有则新增，超过集合下标+n则会报错。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Long index, Object value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForList().set(key,index,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合指定位置的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lindex</span><span class="params">(String key, Long index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().index(key,index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  从存储在键中的列表中删除等于值的元素的第一个计数事件。count&gt; 0：</span></span><br><span class="line"><span class="comment">     *  删除等于从左到右移动的值的第一个元素；count&lt; 0：删除等于从右到左移动的值的第一个元素；count = 0：删除等于value的所有元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">remove</span><span class="params">(String key,<span class="keyword">long</span> count,Object object)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  redisTemplate.opsForList().remove(key, count ,object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * // 截取集合元素长度，保留长度内的数据。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trim</span><span class="params">(String key,<span class="keyword">long</span> start,<span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForList().trim(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 除集合中右边的元素，同时在左边加入一个元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 加入的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回右边的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">rightPopAndLeftPush</span><span class="params">(String key,String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPopAndLeftPush(key,str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除集合中右边的元素在等待的时间里，同时在左边添加元素，如果超过等待的时间仍没有元素则退出。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 左边增中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回移除右边的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">rightPopAndLeftPush</span><span class="params">(String key,String str, <span class="keyword">long</span> timeout)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPopAndLeftPush(key,str,timeout,TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keys != <span class="keyword">null</span> &amp;&amp; keys.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keys.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(keys[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(keys));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds  超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 true 失败 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> seconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key,seconds,TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p><strong>项目常应用于：1、对数据量大的集合数据删减 2、任务队列</strong> </p>
<p><strong>1、对数据量大的集合数据删减</strong><br>列表数据显示、关注列表、粉丝列表、留言评价等…分页、热点新闻（Top5)等<br>利用LRANGE还可以很方便的实现分页的功能,在博客系统中，每片博文的评论也可以存入一个单独的list中。</p>
<p><strong>2、任务队列</strong><br>(list通常用来实现一个消息队列，而且可以确保先后顺序，不必像MySQL那样还需要通过ORDER BY来进行排序)</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">任务队列介绍(生产者和消费者模式)： </span><br><span class="line">	在处理Web客户端发送的命令请求时，某些操作的执行时间可能会比我们预期的更长一些，通过将待执行任务的相关信息放入队列里面，并在之后对队列进行处理，用户可以推迟执行那些需要一段时间才能能完成的操作，这种将工作交给任务处理器来执行的做法被称为任务队列（task queue）。</span><br><span class="line"></span><br><span class="line">RPOPLPUSH source destination </span><br><span class="line">移除列表的最后一个元素，并将该元素添加到另一个列表并返回</span><br></pre></td></tr></table></figure>



<h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如:获取最新5条首页新闻,获取最新的评论列表，获取最后登录10个用户，获取最近7天的活跃用户数等或做为队列来使用。</span><br><span class="line">需求： 获取最新5条首页新闻。</span><br></pre></td></tr></table></figure>

<h3 id="案例2-任务队列"><a href="#案例2-任务队列" class="headerlink" title="案例2 任务队列"></a>案例2 任务队列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1:用户系统登录注册短信实名认证等 </span><br><span class="line">2:订单系统的下单流程等</span><br></pre></td></tr></table></figure>



<h1 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>​        Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。<br>Redis 中集合是通过哈希表实现的，set是通过hashtable实现的<br>​    集合中最大的成员数为 2次方32 - 1 (4294967295, 每个集合可存储40多亿个成员)。<br>​    类似于JAVA中的 Hashtable集合</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">赋值语法：</span> <span class="string"></span></span><br><span class="line">	<span class="attr">SADD</span> <span class="string">key member1 [member2] :向集合添加一个或多个成员 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">取值语法：</span> <span class="string"></span></span><br><span class="line">	<span class="attr">SCARD</span> <span class="string">key :获取集合的成员数 </span></span><br><span class="line">	<span class="attr">SMEMBERS</span> <span class="string">key  :返回集合中的所有成员 </span></span><br><span class="line">	<span class="attr">SISMEMBER</span> <span class="string">key member  :判断 member 元素是否是集合 key 的成员(开发中：验证是否存在判断） </span></span><br><span class="line">	<span class="attr">SRANDMEMBER</span> <span class="string">key [count] :返回集合中一个或多个随机数	   </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">删除语法：</span>  <span class="string"></span></span><br><span class="line">	<span class="attr">SREM</span> <span class="string">key member1 [member2] :移除集合中一个或多个成员</span></span><br><span class="line">	<span class="attr">SPOP</span> <span class="string">key [count]  :移除并返回集合中的一个随机元素</span></span><br><span class="line">	<span class="attr">SMOVE</span> <span class="string">source destination member :将 member 元素从 source 集合移动到 destination 集合</span></span><br><span class="line"></span><br><span class="line"><span class="meta">差集语法：</span> <span class="string"></span></span><br><span class="line">	<span class="attr">SDIFF</span> <span class="string">key1  [key2]   :返回给定所有集合的差集(左侧） </span></span><br><span class="line">	<span class="attr">SDIFFSTORE</span> <span class="string">destination key1 [key2]  :返回给定所有集合的差集并存储在 destination 中</span></span><br><span class="line"><span class="meta">交集语法：</span> <span class="string"></span></span><br><span class="line">	<span class="attr">SINTER</span> <span class="string">key1 [key2]  :返回给定所有集合的交集(共有数据） </span></span><br><span class="line">	<span class="attr">SINTERSTORE</span> <span class="string">destination key1 [key2]  :返回给定所有集合的交集并存储在 destination 中</span></span><br><span class="line"><span class="meta">并集语法：</span> <span class="string"></span></span><br><span class="line"> 	<span class="attr">SUNION</span> <span class="string">key1 [key2] :返回所有给定集合的并集 </span></span><br><span class="line">	<span class="attr">SUNIONSTORE</span> <span class="string">destination key1 [key2]  :所有给定集合的并集存储在 destination 集合中</span></span><br></pre></td></tr></table></figure>



<h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2><p>如下演示了Set类型所有命令的调用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SetcacheServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> guoweixin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"setCacheService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetCacheServiceImpl</span> <span class="keyword">implements</span> <span class="title">SetCacheService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(SetCacheServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  向变量中批量添加值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(String key, Object...objects)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForSet().add(key,objects);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  向变量中批量添加值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">add</span><span class="params">(String key, <span class="keyword">int</span> expireTime, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForSet().add(key,values);</span><br><span class="line">            <span class="keyword">if</span> (expireTime &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, expireTime);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * members(K key)获取变量中的值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回Set对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">members</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取变量中值的长度。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回SET的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">size</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查给定的元素是否在变量中。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 要检查的变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMember</span><span class="params">(String key, Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key,o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转移变量的元素值到目的变量。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 要转移的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destValue 目标键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">move</span><span class="params">(String key, Object value, String destValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().move(key,value,destValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 弹出变量中的元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回弹出的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().pop(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量移除变量中的元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 要移除的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回移除元素个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">remove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().remove(key,values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 匹配获取键值对</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options 选项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回键值对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cursor&lt;Object&gt; <span class="title">scan</span><span class="params">(String key, ScanOptions options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().scan(key,options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过集合求差值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list LIST中的对象是要比较缓存的KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回差差值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">difference</span><span class="params">(String key, List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().difference(key,list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">difference</span><span class="params">(String key, String otherKeys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  redisTemplate.opsForSet().difference(key,otherKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将求出来的差值元素保存。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey 要比较的缓存键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey 要保存差值的缓存键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">differenceAndStore</span><span class="params">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForSet().differenceAndStore(key,otherKey,destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将求出来的差值元素保存。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKeys 要比较的多个缓存键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey 要保存差值的缓存键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">differenceAndStore</span><span class="params">(String key, List otherKeys, String destKey)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForSet().differenceAndStore(key,otherKeys,destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取去重的随机元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回随机元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">distinctRandomMembers</span><span class="params">(String key, <span class="keyword">long</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().distinctRandomMembers(key,count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取2个变量中的交集。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey 比较的缓存键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回交集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">intersect</span><span class="params">(String key, String otherKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().intersect(key,otherKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">intersect</span><span class="params">(String key, List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().intersect(key,list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取2个变量交集后保存到最后一个参数上</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey 其它的缓存键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey 交集键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">intersectAndStore</span><span class="params">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForSet().intersectAndStore(key, otherKey, destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取2个变量交集后保存到最后一个参数上</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey 其它的缓存键列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey 交集键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">intersectAndStore</span><span class="params">(String key, List otherKey, String destKey)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForSet().intersectAndStore(key, otherKey, destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取2个变量的合集。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey 要合的键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回合并后的SET</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">union</span><span class="params">(String key, String otherKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().union(key,otherKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">union</span><span class="params">(String key, Set set)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().union(key,set);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取2个变量合集后保存到最后一个参数上。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey 要合的键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey 合并后的键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unionAndStore</span><span class="params">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForSet().unionAndStore(key, otherKey, destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**获取2个变量合集后保存到最后一个参数上。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 要合的键列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey 合并后的键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unionAndStore</span><span class="params">(String key, List list, String destKey)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForSet().unionAndStore(key, list, destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  随机获取变量中的元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回其中一个随机元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">randomMember</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().randomMember(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机获取变量中指定个数的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 取随机数的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回随机数LIST</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">randomMembers</span><span class="params">(String key, <span class="keyword">long</span> count)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().randomMembers(key,count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keys != <span class="keyword">null</span> &amp;&amp; keys.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keys.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(keys[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(keys));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><p><strong>常应用于：对两个集合间的数据[计算]进行交集、并集、差集运算</strong> </p>
<p>1、利用集合操作，可以取不同兴趣圈子的交集,以非常方便的实现如共同关注、共同喜好、二度好友等功能。对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存储到一个新的集合中。</p>
<p>2、利用唯一性，可以统计访问网站的所有独立 IP、存取当天[或某天]的活跃用户列表。</p>
<h2 id="代码案例-1"><a href="#代码案例-1" class="headerlink" title="代码案例"></a>代码案例</h2><h3 id="案例1-1"><a href="#案例1-1" class="headerlink" title="案例1"></a>案例1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">判断用户名是否存在</span><br></pre></td></tr></table></figure>

<h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">抽奖活动。</span><br><span class="line">现有员工10个。1等奖1名。2等奖2名。3等奖3名。 用Redis实现</span><br></pre></td></tr></table></figure>

<h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有两组数据，求两组数据的 交集、差集、并集</span><br></pre></td></tr></table></figure>

<h1 id="ZSet"><a href="#ZSet" class="headerlink" title="ZSet"></a>ZSet</h1><p>有序集合(sorted set) </p>
<h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>1、 Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。<br>2、不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>3、有序集合的成员是唯一的,但分数(score)却可以重复。<br>4、集合是通过哈希表实现的。 集合中最大的成员数为 2次方32 - 1 (4294967295, 每个集合可存储40多亿个成员)。Redis的ZSet是有序、且不重复<br><code>（很多时候，我们都将redis中的有序集合叫做zsets，这是因为在redis中，有序集合相关的操作指令都是以z开头的）</code></p>
<h2 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">赋值语法：</span> <span class="string"></span></span><br><span class="line">	<span class="attr">ZADD</span> <span class="string">key score1 member1 [score2 member2]  :向有序集合添加一个或多个成员，或者更新已存在成员的分数  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">取值语法：</span> <span class="string"></span></span><br><span class="line">	<span class="attr">ZCARD</span> <span class="string">key  :获取有序集合的成员数</span></span><br><span class="line">	<span class="attr">ZCOUNT</span> <span class="string">key min max :计算在有序集合中指定区间分数的成员数</span></span><br><span class="line">	<span class="attr">ZRANK</span> <span class="string">key member :返回有序集合中指定成员的索引</span></span><br><span class="line">	<span class="attr">ZRANGE</span> <span class="string">key start stop [WITHSCORES] :通过索引区间返回有序集合成指定区间内的成员(低到高)</span></span><br><span class="line">	<span class="attr">ZRANGEBYSCORE</span> <span class="string">key min max [WITHSCORES] [LIMIT] :通过分数返回有序集合指定区间内的成员</span></span><br><span class="line">	<span class="attr">ZREVRANGE</span> <span class="string">key start stop [WITHSCORES] :返回有序集中指定区间内的成员，通过索引，分数从高到底</span></span><br><span class="line">	<span class="attr">ZREVRANGEBYSCORE</span> <span class="string">key max min [WITHSCORES] :返回有序集中指定分数区间内的成员，分数从高到低排序</span></span><br><span class="line"><span class="meta">删除语法：</span> <span class="string"></span></span><br><span class="line">	<span class="attr">DEL</span> <span class="string">key   :移除集合 </span></span><br><span class="line">	<span class="attr">ZREM</span> <span class="string">key member [member ...] :移除有序集合中的一个或多个成员</span></span><br><span class="line">	<span class="attr">ZREMRANGEBYRANK</span> <span class="string">key start stop :移除有序集合中给定的排名区间的所有成员(第一名是0)(低到高排序)</span></span><br><span class="line">	<span class="attr">ZREMRANGEBYSCORE</span> <span class="string">key min max :移除有序集合中给定的分数区间的所有成员</span></span><br><span class="line">	</span><br><span class="line">	<span class="attr">ZINCRBY</span>  <span class="string">key increment member  	:增加memeber元素的分数increment，返回值是更改后的分数</span></span><br></pre></td></tr></table></figure>



<h2 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h2><p>如下演示了ZSet类型所有命令的调用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ZSetCacheServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> guoweixin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"zsetCacheService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZSetCacheServiceImpl</span> <span class="keyword">implements</span> <span class="title">ZSetCacheService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(ZSetCacheServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增添加元素到变量中同时指定元素的分值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 分值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(String key, Object value, <span class="keyword">double</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForZSet().add(key,value,score);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取变量指定区间的元素。START为0,END为-1代表取全部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 结束位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回SET</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">range</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().range(key,start,end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于获取满足非score的排序取值。这个排序只有在有相同分数的情况下才能使用，如果有不同的分数则返回值不确定。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> range</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回SET</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">rangeByLex</span><span class="params">(String key, RedisZSetCommands.Range range)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByLex(key,range);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取变量中元素的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">zCard</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().zCard(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取区间值的个数。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 最小SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 最大SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">count</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().count(key,min,max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改变量中的元素的分值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">incrementScore</span><span class="params">(String key, Object value, <span class="keyword">double</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key,value,delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取元素的分值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 要查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回分值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">score</span><span class="params">(String key, Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().score(key,o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于获取满足非score的设置下标开始的长度排序取值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> range 范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 限制区域</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回SET</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">rangeByLex</span><span class="params">(String key, RedisZSetCommands.Range range, RedisZSetCommands.Limit limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByLex(key, range,limit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过TypedTuple方式新增数据。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tuples 元组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String key, Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForZSet().add(key,tuples);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据设置的score获取区间值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回SET</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">rangeByScore</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScore(key,min,max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据设置的score获取区间值从给定下标和给定长度获取最终值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 取的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回SET</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">rangeByScore</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max, <span class="keyword">long</span> offset, <span class="keyword">long</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScore(key,min,max,offset,count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取RedisZSetCommands.Tuples的区间值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始SCORE值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束SCORE值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回区间值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; rangeWithScores(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeWithScores(key,start,end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取RedisZSetCommands.Tuples的区间值通过分值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 最小分值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 最大分值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回SET</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; rangeByScoreWithScores(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取RedisZSetCommands.Tuples的区间值从给定下标和给定长度获取最终值通过分值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 最小分值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 最大分值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 总数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回SET</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; rangeByScoreWithScores(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max, <span class="keyword">long</span> offset, <span class="keyword">long</span> count) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max,offset,count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取变量中元素的索引,下标开始位置为</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 要查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">rank</span><span class="params">(String key, Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rank(key,o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 匹配获取键值对，ScanOptions.NONE为获取全部键值对；ScanOptions.scanOptions().match("C").build()匹配获取键位map1的键值对,不能模糊匹配。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options 选项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回键值对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Cursor&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; scan(String key, ScanOptions options) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().scan(key, options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 索引倒序排列指定区间元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 结束位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回倒排后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">reverseRange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRange(key,start,end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 倒序排列指定分值区间元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 最小SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 最大SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回区间元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">reverseRangeByScore</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeByScore(key,min,max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 倒序排列从给定下标和给定长度分值区间元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 最小SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 最大SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count  数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">reverseRangeByScore</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max, <span class="keyword">long</span> offset, <span class="keyword">long</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeByScore(key,min,max,offset,count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 倒序排序获取RedisZSetCommands.Tuples的分值区间值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 最小SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 最大SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回SET集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; reverseRangeByScoreWithScores(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeByScoreWithScores(key,min,max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序排序获取RedisZSetCommands.Tuples的从给定下标和给定长度分值区间值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 最小SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 最大SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 总数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回SET</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; reverseRangeByScoreWithScores(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max, <span class="keyword">long</span> offset, <span class="keyword">long</span> count) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeByScoreWithScores(key,min,max,offset,count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 索引倒序排列区间值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始Score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>      返回列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; reverseRangeWithScores(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(key,start,end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取倒序排列的索引值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o   值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>    返回倒序排列的索引值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">reverseRank</span><span class="params">(String key, Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRank(key,o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取2个变量的交集存放到第3个变量里面。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey 要交集的键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey 目标键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回交集长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">intersectAndStore</span><span class="params">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().intersectAndStore(key,otherKey,destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多个变量的交集存放到第3个变量里面。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 多个要交集的KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey 要存入的KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">intersectAndStore</span><span class="params">(String key, List list, String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().intersectAndStore(key,list,destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取2个变量的合集存放到第3个变量里面。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey 要合并的KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey  共同的并集元素存到destK</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回元素个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">unionAndStore</span><span class="params">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().unionAndStore(key,otherKey,destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多个变量的合集存放到第3个变量里面。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 要合的集合KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey 目票集合KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回合集长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">unionAndStore</span><span class="params">(String key, List list, String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().unionAndStore(key,list,destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量移除元素根据元素值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 要删除的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回删除的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">remove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().remove(key,values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分值移除区间元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 最小的SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 最大的SCORE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回移除的元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">removeRangeByScore</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().removeRangeByScore(key,min,max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引值移除区间元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 索引开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   索引结束</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回移除的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">removeRange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().removeRange(key,start,end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定的KEY的缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keys != <span class="keyword">null</span> &amp;&amp; keys.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keys.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(keys[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(keys));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h2><p><strong>常应用于：排行榜</strong> </p>
<p>销量排名，积分排名等</p>
<blockquote>
<p>1比如twitter 的public timeline可以以发表时间作为score来存储，这样获取时就是自动按时间排好序的。</p>
<p>2比如一个存储全班同学成绩的Sorted Set，其集合value可以是同学的学号，而score就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。</p>
<p>3还可以用Sorted Set来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">登录网站：</span><br><span class="line">  1、实名认证     1</span><br><span class="line">  2、收货地址    3</span><br><span class="line">  3、绑定银行卡  2</span><br></pre></td></tr></table></figure>



<h2 id="代码案例-2"><a href="#代码案例-2" class="headerlink" title="代码案例"></a>代码案例</h2><h3 id="案例1-2"><a href="#案例1-2" class="headerlink" title="案例1"></a>案例1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">积分、成绩、等等排行榜</span><br></pre></td></tr></table></figure>

<p>学员成绩排行榜：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需求1：在zset中插入10名同学成绩</span><br><span class="line">需求2：按成绩由高到低，查出前3名同学成绩信息</span><br><span class="line">需求3：查询成绩在60- 80分之间 的同学成绩信息</span><br></pre></td></tr></table></figure>



<h1 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</span><br><span class="line">Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</span><br><span class="line">但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">小知识：</span><br><span class="line">什么是基数?</span><br><span class="line">比如数据集 &#123;1, 3, 5, 7, 5, 7, 8&#125;， 那么这个数据集的基数集为 &#123;1, 3, 5 ,7, 8&#125;, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</span><br></pre></td></tr></table></figure>

<h2 id="为什么需要HyperLoglog"><a href="#为什么需要HyperLoglog" class="headerlink" title="为什么需要HyperLoglog"></a>为什么需要HyperLoglog</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果要统计1亿个数据的基数值，大约需要内存100000000&#x2F;8&#x2F;1024&#x2F;1024 ≈ 12M，内存减少占用的效果显著。</span><br><span class="line"></span><br><span class="line">然而统计一个对象的基数值需要12M，如果统计10000个对象，就需要将近120G，同样不能广泛用于大数据场景。</span><br></pre></td></tr></table></figure>



<h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">PFADD</span> <span class="string">key element [element ...] :添加指定元素到 HyperLogLog 中</span></span><br><span class="line"><span class="attr">PFCOUNT</span> <span class="string">key [key ...] :返回给定 HyperLogLog 的基数估算值</span></span><br><span class="line"><span class="attr">PFMERGE</span> <span class="string">destkey sourcekey [sourcekey ...] :将多个 HyperLogLog 合并为一个 HyperLogLog</span></span><br></pre></td></tr></table></figure>



<h2 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h2><p><strong>基数不大，数据量不大就用不上，会有点大材小用浪费空间</strong><br><strong>有局限性，就是只能统计基数数量，而没办法去知道具体的内容是什么</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">统计注册 IP 数</span><br><span class="line">统计每日访问 IP 数</span><br><span class="line">统计页面实时 UV 数</span><br><span class="line">统计在线用户数</span><br><span class="line">统计用户每天搜索不同词条的个数</span><br><span class="line">统计真实文章阅读数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pfadd p1  2020-1-1-192.168.1.1   2020-1-1-192.168.1.1 2020-1-2-192.168.1.1</span><br><span class="line"></span><br><span class="line">pfadd p1  2020-1-1-192.168.1.1-redis   2020-1-1-192.168.1.1 2020-1-2-192.168.1.1</span><br></pre></td></tr></table></figure>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HyperLogLog是一种算法，并非redis独有</span><br><span class="line">目的是做基数统计，故不是集合，不会保存元数据，只记录数量而不是数值。</span><br><span class="line">耗空间极小，支持输入非常体积的数据量</span><br><span class="line"></span><br><span class="line">核心是基数估算算法，主要表现为计算时内存的使用和数据合并的处理。最终数值存在一定误差</span><br><span class="line">redis中每个hyperloglog key占用了12K的内存用于标记基数（官方文档）</span><br><span class="line">pfadd命令并不会一次性分配12k内存，而是随着基数的增加而逐渐增加内存分配；而pfmerge操作则会将sourcekey合并后存储在12k大小的key中，这由hyperloglog合并操作的原理（两个hyperloglog合并时需要单独比较每个桶的值）可以很容易理解。</span><br><span class="line"></span><br><span class="line">误差说明：基数估计的结果是一个带有 0.81% 标准错误（standard error）的近似值。是可接受的范围</span><br><span class="line">Redis 对 HyperLogLog 的存储进行了优化，在计数比较小时，它的存储空间采用稀疏矩阵存储，空间占用很小，仅仅在计数慢慢变大，稀疏矩阵占用空间渐渐超过了阈值时才会一次性转变成稠密矩阵，才会占用 12k 的空间</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的一些功能</title>
    <url>/2017/08/03/Redis%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="Redis其它功能"><a href="#Redis其它功能" class="headerlink" title="Redis其它功能"></a>Redis其它功能</h1><h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。<br>Redis 客户端可以订阅任意数量的频道。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Redis 发布订阅(pub&#x2F;sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</span><br><span class="line">Redis 客户端可以订阅任意数量的频道。</span><br><span class="line">下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系</span><br></pre></td></tr></table></figure>

<p> <img src= "/img/loading.gif" data-src="https://gitee.com/flashwk/TyporaPic/raw/master/TyporaImg/p20.PNG" alt="p20"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</span><br></pre></td></tr></table></figure>

<p> <img src= "/img/loading.gif" data-src="https://gitee.com/flashwk/TyporaPic/raw/master/TyporaImg/p21.PNG" alt="p21"></p>
<p>配置订阅和发布</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">订阅频道：</span></span><br><span class="line">	<span class="attr">SUBSCRIBE</span> <span class="string">channel [channel ...] :订阅给定的一个或多个频道的信息</span></span><br><span class="line">	<span class="attr">PSUBSCRIBE</span> <span class="string">pattern [pattern ...] :订阅一个或多个符合给定模式的频道。</span></span><br><span class="line">	</span><br><span class="line"><span class="attr">发布频道：</span></span><br><span class="line">	<span class="attr">PUBLISH</span> <span class="string">channel message :将信息发送到指定的频道。</span></span><br><span class="line">	</span><br><span class="line"><span class="attr">退订频道：</span></span><br><span class="line">	<span class="attr">UNSUBSCRIBE</span> <span class="string">[channel [channel ...]] :指退订给定的频道。</span></span><br><span class="line">	<span class="attr">PUNSUBSCRIBE</span> <span class="string">[pattern [pattern ...]]:退订所有给定模式的频道。</span></span><br></pre></td></tr></table></figure>

<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><blockquote>
<p>这一功能最明显的用法就是构建实时消息系统，比如普通的即时聊天，群聊等功能<br>1在一个博客网站中，有100个粉丝订阅了你，当你发布新文章，就可以推送消息给粉丝们。<br>2微信公众号模式</p>
<p><strong>微博</strong>，每个用户的粉丝都是该用户的订阅者，当用户发完微博，所有粉丝都将收到他的动态；</p>
<p><strong>新闻</strong>，资讯站点通常有多个频道，每个频道就是一个主题，用户可以通过主题来做订阅(如RSS)，这样当新闻发布时，订阅者可以获得更新</p>
<p>简单的应用场景的话, 以门户网站为例, 当编辑更新了某推荐板块的内容后:</p>
<ol>
<li>CMS发布清除缓存的消息到channel (推送者推送消息)</li>
<li>门户网站的缓存系统通过channel收到清除缓存的消息 (订阅者收到消息)，更新了推荐板块的缓存</li>
<li>还可以做集中配置中心管理，当配置信息发生更改后，订阅配置信息的节点都可以收到通知消息</li>
</ol>
</blockquote>
<h1 id="Redis多数据库"><a href="#Redis多数据库" class="headerlink" title="Redis多数据库"></a>Redis多数据库</h1><p>Redis下，数据库是由一个整数索引标识，而不是由一个数据库名称。默认情况下，一个客户端连接到数据库0。</p>
<p><strong>redis配置文件中下面的参数来控制数据库总数：</strong><br>    database 16  //(从0开始 1 2 3 …15)</p>
<p><strong>select 数据库//数据库的切换</strong> </p>
<p><strong>移动数据（将当前key移动另个库)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">move key名称   数据库</span><br></pre></td></tr></table></figure>

<p><strong>数据库清空：</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">flushdb</span>  :<span class="string">清除当前数据库的所有key</span></span><br><span class="line"><span class="attr">flushall</span> :<span class="string">清除整个Redis的数据库所有key</span></span><br></pre></td></tr></table></figure>



<h1 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h1><p>Redis 事务可以一次执行多个命令，（按顺序地串行化执行，执行中不会被其它命令插入，不许加塞）</p>
<h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Redis 事务可以一次执行多个命令（允许在一次单独的步骤中执行一组命令）， 并且带有以下两个重要的保证：</p>
<blockquote>
<p>批量操作在发送 EXEC 命令前被放入队列缓存。<br>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。<br>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p>
</blockquote>
<ol>
<li><strong>Redis会将一个事务中的所有命令序列化，然后按顺序执行</strong></li>
<li><strong>执行中不会被其它命令插入，不许出现加赛行为</strong></li>
</ol>
<h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attr">DISCARD</span></span><br><span class="line">	:取消事务，放弃执行事务块内的所有命令。</span><br><span class="line"><span class="attr">EXEC</span></span><br><span class="line">	:执行所有事务块内的命令。</span><br><span class="line">	</span><br><span class="line"><span class="attr">MULTI</span></span><br><span class="line">	:标记一个事务块的开始。	</span><br><span class="line"></span><br><span class="line"><span class="attr">UNWATCH</span></span><br><span class="line">	:取消 WATCH 命令对所有 key 的监视。</span><br><span class="line">	</span><br><span class="line"><span class="attr">WATCH</span> <span class="string">key [key ...]</span></span><br><span class="line">	:监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</span><br></pre></td></tr></table></figure>



<p><strong>一个事务从开始到执行会经历以下三个阶段：</strong></p>
<p>开始事务。</p>
<p>命令入队。</p>
<p>执行事务。</p>
<h2 id="示例1-MULTI-EXEC"><a href="#示例1-MULTI-EXEC" class="headerlink" title="示例1 MULTI EXEC"></a>示例1 MULTI EXEC</h2><p><strong>转帐功能，A向B帐号转帐50元</strong><br>一个事务的例子，它先以 MULTI 开始一个事务，然后将多个命令入队到事务中，最后由 EXEC 命令触发事务</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/flashwk/TyporaPic/raw/master/TyporaImg/12.png" alt=""></p>
<p><strong>1输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行</strong><br><strong>2直到输入Exec后，Redis会将之前的命令队列中的命令依次执行</strong></p>
<h2 id="示例2-DISCARD放弃队列运行"><a href="#示例2-DISCARD放弃队列运行" class="headerlink" title="示例2 DISCARD放弃队列运行"></a>示例2 DISCARD放弃队列运行</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/flashwk/TyporaPic/raw/master/TyporaImg/13.png" alt=""></p>
<p>1输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行<br>2直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。<br>3命令队列的过程中可以通过discard来放弃队列运行</p>
<h2 id="示例3事务的错误处理"><a href="#示例3事务的错误处理" class="headerlink" title="示例3事务的错误处理"></a>示例3事务的错误处理</h2><p>事务的错误处理：<br>如果执行的某个命令报出了错误，则只有报错的命令不会被执行，而其它的命令都会执行，不会回滚。</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/flashwk/TyporaPic/raw/master/TyporaImg/14.png" alt=""></p>
<h2 id="示例4事务的错误处理"><a href="#示例4事务的错误处理" class="headerlink" title="示例4事务的错误处理"></a>示例4事务的错误处理</h2><p>事务的错误处理：<br><strong>队列中的某个命令出现了报告错误，执行时整个的所有队列都会被取消。</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/flashwk/TyporaPic/raw/master/TyporaImg/15.png" alt=""></p>
<p><strong>由于之前的错误，事务执行失败</strong></p>
<h2 id="示例5事务的WATCH"><a href="#示例5事务的WATCH" class="headerlink" title="示例5事务的WATCH"></a>示例5事务的WATCH</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attr">WATCH</span> <span class="string">key [key ...] </span></span><br><span class="line">:监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</span><br></pre></td></tr></table></figure>

<p>需求：某一帐户在一事务内进行操作，在提交事务前，另一个进程对该帐户进行操作。</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/flashwk/TyporaPic/raw/master/TyporaImg/16.png" alt=""></p>
<h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><p>一组命令必须同时都执行，或者都不执行。<br>我们想要保证一组命令在执行的过程之中不被其它命令插入。</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>秒杀/转帐</p>
<blockquote>
<p>小米官方。 </p>
<p>业务逻辑目的秒杀：</p>
<p>​     100个手机。定于14：00进行开始秒杀。（条件限制：1个用户只能秒杀一台。原价2000元手机 200元就卖）</p>
</blockquote>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">初始化：</span><br><span class="line"> <span class="number">1</span>、存<span class="number">100</span>台手机集合 List</span><br><span class="line"> <span class="number">2</span>、获得奖口的用户集合  <span class="built_in">Set</span>集合。  用户名。</span><br><span class="line"> 自增 +<span class="number">1</span>...</span><br></pre></td></tr></table></figure>





<h1 id="Redis数据淘汰策略redis-conf"><a href="#Redis数据淘汰策略redis-conf" class="headerlink" title="Redis数据淘汰策略redis.conf"></a>Redis数据淘汰策略redis.conf</h1><p>Redis官方给的警告，当内存不足时，Redis会根据配置的缓存策略淘汰部分Keys，以保证写入成功。当无淘汰策略时或没有找到适合淘汰的Key时，Redis直接返回out of memory错误。</p>
<p>最大缓存配置<br>在redis中，允许用户设置最大使用内存大小<br>maxmemory  512G</p>
<blockquote>
<p><strong>redis提供8种数据淘汰策略：</strong><br>•    volatile-lru：从已设置过期时间的数据集中挑选最近最少使用的数据淘汰<br>•    volatile-lfu：从已设置过期的Keys中，删除一段时间内使用次数最少使用的<br>•    volatile-ttl：从已设置过期时间的数据集中挑选最近将要过期的数据淘汰<br>•    volatile-random：从已设置过期时间的数据集中随机选择数据淘汰<br>•    allkeys-lru：从数据集中挑选最近最少使用的数据淘汰<br>•    allkeys-lfu：从所有Keys中，删除一段时间内使用次数最少使用的<br>•    allkeys-random：从数据集中随机选择数据淘汰<br>•    no-enviction（驱逐）：禁止驱逐数据(不采用任何淘汰策略。默认即为此配置),针对写操作，返回错误信息</p>
</blockquote>
<p>建议：了解了Redis的淘汰策略之后，在平时使用时应尽量主动设置/更新key的expire时间，主动剔除不活跃的旧数据，有助于提升查询性能</p>
<h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><p><strong>什么是Redis持久化？</strong><br>持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。<br>Redis 提供了两种持久化方式:RDB（默认）和AOF</p>
<h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p><strong>数据存放于：</strong></p>
<p><strong>内存：高效、断电（关机）内存数据会丢失</strong></p>
<p><strong>硬盘：读写速度慢于内存，断电数据不会丢失</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Redis持久化存储支持两种方式：RDB和AOF。RDB一定时间取存储文件，AOF默认每秒去存储历史命令，</span><br><span class="line">Redis是支持持久化的内存数据库，也就是说redis需要经常将内存中的数据同步到硬盘来保证持久化。</span><br></pre></td></tr></table></figure>

<h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>rdb是Redis DataBase缩写<br>功能核心函数rdbSave(生成RDB文件)和rdbLoad（从文件加载内存）两个函数</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/flashwk/TyporaPic/raw/master/TyporaImg/17.png" alt=""></p>
<p>RDB：是redis的默认持久化机制。<br>快照是默认的持久化方式。这种方式是就是将内存中数据以快照的方式写入到二进制文件中,默认的文件名为    dump.rdb。</p>
<p><strong>优点：</strong><br>快照保存数据极快、还原数据极快<br>适用于灾难备份<br><strong>缺点：</strong>小内存机器不适合使用,RDB机制符合要求就会照快照</p>
<p><strong>快照条件：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、服务器正常关闭时  .&#x2F;bin&#x2F;redis-cli shutdown</span><br><span class="line">2、key满足一定条件，会进行快照 </span><br><span class="line"> vim redis.conf搜索save</span><br><span class="line">       :&#x2F;save</span><br><span class="line">      save 900 1     &#x2F;&#x2F;每900秒（15分钟）至少1个key发生变化，产生快照</span><br><span class="line">      save 300 10   &#x2F;&#x2F;每300秒（5分钟）至少10个key发生变化，产生快照</span><br><span class="line">      save 60 10000   &#x2F;&#x2F;每60秒（1分钟）至少10000个key发生变化，产生快照</span><br></pre></td></tr></table></figure>



<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>由于快照方式是在一定间隔时间做一次的，所以如果redis意外down 掉的话，就会丢失最后一次快照后的所有修改。如果应用要求不能丢失任何修改的话，可以采用aof持久化方式。</p>
<p>Append-only file:aof 比快照方式有更好的持久化性，是由于在使用aof持久化方式时,redis会将每一个收到的写命令都通过write 函数追加到文件中(默认是appendonly.aof)。当redis重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/flashwk/TyporaPic/raw/master/TyporaImg/18.png" alt=""></p>
<p><strong>每当执行服务器(定时)任务或者函数时flushAppendOnlyFile函数都会被调用，这个函数执行以下两个工作</strong><br><strong>aof写入保存：</strong><br>WRITE：根据条件，将aof_buf中的缓存写入到 AOF 文件<br>SAVE：根据条件，调用fsync或fdatasync函数，将 AOF 文件保存到磁盘中。</p>
<p><strong>有三种方式如下（默认是：每秒fsync一次）</strong><br>•    appendonly yes //启用aof持久化方式<br>•    # appendfsync always //收到写命令就立即写入磁盘，最慢，但是保证完全的持久化<br>•    appendfsynceverysec //每秒钟写入磁盘一次，在性能和持久化方面做了很好的折中<br>•    # appendfsync no //完全依赖os，性能最好,持久化保证</p>
<p><strong>产生的问题：</strong><br> aof的方式也同时带来了另一个问题。持久化文件会变的越来越大。例如我们调用incr test命令 100 次，文件中必须保存全部的 100 条命令，其实有 99 条都是多余的。</p>
<h1 id="Redis缓存与数据库一致性"><a href="#Redis缓存与数据库一致性" class="headerlink" title="Redis缓存与数据库一致性"></a>Redis缓存与数据库一致性</h1><h2 id="一、实时同步"><a href="#一、实时同步" class="headerlink" title="一、实时同步"></a>一、实时同步</h2><p>对强一致要求比较高的，应采用实时同步方案，即查询缓存查询不到再从DB查询，保存到缓存；更新缓存时，先更新数据库，再将缓存的设置过期(建议不要去更新缓存内容，直接设置缓存过期)。<br>@Cacheable：查询时使用，注意Long类型需转换为Sting类型，否则会抛异常<br>@CachePut：更新时使用，使用此注解，一定会从DB上查询数据<br>@CacheEvict：删除时使用；<br>@Caching：组合用法     </p>
<p>非实时同步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实时：一方修改，另一方同步修改</span><br><span class="line">非实时：一方修改，另一方向不需要同步修改</span><br><span class="line">   1个文章 1分钟内被100万点击（点击数100万）</span><br><span class="line"> 定时任务 (凌晨2点触发定时任务）：  将redis num值查询出来 更新mysql</span><br><span class="line">    redis incr num  num&#x3D;100万</span><br><span class="line">    mysql num:0;</span><br><span class="line">异步队列：</span><br><span class="line">   消息队列：</span><br><span class="line">电商网站：</span><br><span class="line">   注册完成--》1邮箱发送注册成功  欢迎信息  4</span><br><span class="line">          --》2手机号发送（注册成功）  欢迎信息  3</span><br><span class="line">          --》3将注册的信息插入到数据库     1    8秒钟</span><br><span class="line">     异步队列：</span><br><span class="line">        流量的削峰</span><br><span class="line">          </span><br><span class="line">        异步</span><br><span class="line">      中间件：解决方案</span><br></pre></td></tr></table></figure>



<h2 id="二、异步队列"><a href="#二、异步队列" class="headerlink" title="二、异步队列"></a>二、异步队列</h2><p>对于并发程度较高的，可采用异步队列的方式同步，可采用kafka/RabbitMQ等消息中间件处理消息生产和消费。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">双11时   5000万人--》支付成功后--》生成订单--》 一小部分人先发货--》4000万人 [中间件异步队列]  生成物流--》物流发货。</span><br><span class="line"></span><br><span class="line">activemq rabbitmq zeromq.. rockermq  kafak..</span><br><span class="line"></span><br><span class="line">kafak   免费。 （性能也很高）</span><br><span class="line">    如果性能高（查询、增删效率）会放在内存在。（但是放在硬盘上）</span><br><span class="line">   kakfa为什么性能那么快？</span><br><span class="line">   </span><br><span class="line">rockermq  apache    </span><br><span class="line">rabbitmq  优点消息可靠性最高。（0 丢失）    功能很强大。（价钱也昂贵）</span><br></pre></td></tr></table></figure>





<h2 id="三、使用阿里的同步工具canal"><a href="#三、使用阿里的同步工具canal" class="headerlink" title="三、使用阿里的同步工具canal"></a>三、使用阿里的同步工具canal</h2><h2 id="四、采用UDF自定义函数的方式"><a href="#四、采用UDF自定义函数的方式" class="headerlink" title="四、采用UDF自定义函数的方式"></a>四、采用UDF自定义函数的方式</h2><p>面对mysql的API进行编程，利用触发器进行缓存同步，但UDF主要是c/c++语言实现，学习成本高。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="穿透"><a href="#穿透" class="headerlink" title="穿透"></a>穿透</h2><p><strong>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。</strong></p>
<p><strong>解决办法：</strong> </p>
<p>​      持久层查询不到就缓存空结果，查询时先判断缓存中是否exists(key) ,如果有直接返回空，没有则查询后返回，<br>注意insert时需清除查询的key，否则即便DB中有值也查询不到(当然也可以设置空缓存的过期时间）</p>
<p>​        1、不管数据实际上存不存在，我们都把这个键存到缓存中（有效期设置的短一些，比如一分钟到三分钟），然后值设置为一个特定值，业务中如果获取到的结果是这个特定值，则报错返回。</p>
<p>​        2、是使用 redis 的布隆过滤器（Bloom Filter），将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。</p>
<h2 id="雪崩"><a href="#雪崩" class="headerlink" title="雪崩"></a><strong>雪崩</strong></h2><p><strong>雪崩：缓存大量失效的时候，引发大量查询数据库。</strong></p>
<p><strong>解决办法：</strong></p>
<p>​    用锁/分布式锁或者队列串行访问<br>​    缓存失效时间均匀分布</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果缓存集中在一段时间内失效，发生大量的缓存穿透，所有的查询都落在数据库上，造成了缓存雪崩。</span><br><span class="line"></span><br><span class="line">这个没有完美解决办法，但可以分析用户行为，尽量让失效时间点均匀分布。大多数系统设计者考虑用加锁或者队列的方式保证缓存的单线程（进程）写，从而避免失效时大量的并发请求落到底层存储系统上。</span><br></pre></td></tr></table></figure>



<p><strong>1 加锁排队. 限流– 限流算法.</strong></p>
<p> 在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p>
<p>简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如<a href="http://lib.csdn.net/base/redis" target="_blank" rel="noopener">Redis</a>的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。</p>
<p>SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现锁的效果。</p>
<p><strong>2 数据预热</strong></p>
<p>  可以通过缓存reload机制，预先去更新缓存，再即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀</p>
<h2 id="热点key-缓存击穿"><a href="#热点key-缓存击穿" class="headerlink" title="热点key(缓存击穿)"></a>热点key(缓存击穿)</h2><p><strong>热点key:某个key访问非常频繁，当key失效的时候有大量线程来构建缓存，导致负载增加，系统崩溃。</strong></p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">缓存击穿是指一个Key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个Key在失效的瞬间，持续的大并发就穿破缓存，直接请求到数据库，这时，大并发量可能直接将数据库给挂掉。</span><br></pre></td></tr></table></figure>

<p><strong>解决办法：</strong></p>
<p>1 使用锁，单机用synchronized,lock等，分布式用分布式锁。</p>
<p>2 缓存过期时间不设置，而是设置在key对应的value里。如果检测到存的时间超过过期时间则异步更新缓存。</p>
<p>3在value设置一个比过期时间t0小的过期时间值t1，当t1过期的时候，延长t1并做更新缓存操作。</p>
<p>4设置标签缓存，标签缓存设置过期时间，标签缓存过期后，需异步地更新实际缓存 </p>
<h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设并发有10000个请求，想达到第一次请求从数据库中获取，其他9999个请求从redis中获取这种效果</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public synchroinzed selectbyId(String id)&#123;</span><br><span class="line">    if(key.exists(key))&#123;</span><br><span class="line">       redis</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      mysql</span><br><span class="line">       redis.set(&quot;..&quot;,val);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/flashwk/TyporaPic/raw/master/TyporaImg/19.png" alt=""></p>
<p>通过测试，发现有大量请求进行查询数据库~~</p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">public</span> <span class="string">synchronized  User selectById(String id)  :synchronized</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用互斥锁排队</span><br><span class="line">业界比价普遍的一种做法，即根据key获取value值为空时，锁上，从数据库中load数据后再释放锁。若其它线程获取锁失败，则等待一段时间后重试。这里要注意，分布式环境中要使用分布式锁，单机的话用普通的锁（synchronized、Lock）就够了。</span><br></pre></td></tr></table></figure>

<h4 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h4><p>双重检测锁压测</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/flashwk/TyporaPic/raw/master/TyporaImg/20.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>redis事务</tag>
        <tag>redis持久化</tag>
        <tag>缓存与数据库一致性</tag>
      </tags>
  </entry>
</search>
